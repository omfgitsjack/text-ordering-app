(function () {
    "use strict";

    angular
        .module('app.admin')
        .controller('adminController', adminController);

    function adminController($scope, $timeout, $mdSidenav, $mdUtil, $log, $state, ShopService,
                             entityManagerFactory) {

        $scope.toggleLeft = buildToggler('left');

        function buildToggler(navID) {
            var debounceFn = $mdUtil.debounce(function () {
                $mdSidenav(navID)
                    .toggle()
                    .then(function () {
                        $log.debug("toggle " + navID + " is done");
                    });
            }, 300);
            return debounceFn;
        }

        $scope.leftClose = function () {
            $mdSidenav('left').close()
                .then(function () {
                    $log.debug("close LEFT is done");
                });
        };

        $scope.goToOrders = function () {
            $state.go('admin.orders');
        };

        $scope.goToFoodMenu = function () {
            $state.go('admin.food');
        };

        $scope.goToDrinkMenu = function () {
            $state.go('admin.drinks');
        };

        $scope.changeStoreStatus = function () {
            // Dont do anything.
        };

        // Initialize ShopService
        ShopService
            .get()
            .success(function (item) {
                $scope.shop = {
                    is_open: item['is_open']
                };

                $scope.$watch('shop', function (newVal, oldVal) {
                    if (newVal !== oldVal) {
                        ShopService
                            .update(newVal)
                            .success(function (res) {
                                toastr.success("You updated your shop's status");
                            });
                    }
                }, true)
            });

        // Convenience variables
        var DT = breeze.DataType;
        var Identity = breeze.AutoGeneratedKeyType.Identity;
        var Validator = breeze.Validator;
        var noConversion = breeze.NamingConvention.none;

        var serviceName = 'api/'; // root path for data from the server
        var helper = new breeze.config.MetadataHelper();
        var addTypeToStore = helper.addTypeToStore.bind(helper);

        function createMetadataStore(serviceName) {

            var store = new breeze.MetadataStore({
                namingConvention: noConversion
            });

            var jsonResultsAdapter = new breeze.JsonResultsAdapter({
                name: "ucafe",
                extractResults: function(json) {
                    return json.results;
                },
                visitNode: function(node, mappingContext, nodeContext) {
                    var queryResourceName = mappingContext.query.resourceName;
                    var entityType = mappingContext.metadataStore.getEntityTypeNameForResourceName(queryResourceName);

                    return {
                        entityType: entityType,
                        nodeId: node.id
                    };
                }
            });

            // Setup data service
            var dataService = new breeze.DataService({
                serviceName: serviceName,
                hasServerMetadata: false,
                jsonResultsAdapter: jsonResultsAdapter
            });

            store.addDataService(dataService);

            // Add types in alphabetical order ... because we can
            addDrinkType(store);

            return store;
        }

        var store = createMetadataStore(serviceName);

        var manager = new breeze.EntityManager({
            dataService: store.getDataService(serviceName),
            metadataStore: store
        });

        function addDrinkType(store) {
            var et = {
                // Header info
                name: "drink",
                autoGeneratedKeyType: Identity,
                defaultResourceName: "drinks",

                dataProperties: {
                    id:   { dataType: DT.Int32, isPartOfKey: true },
                    name: { maxLength: 4000 }, // DT.String is the default type
                    description:  { maxLength: 4000 },
                    price:      { dataType: DT.Double, maxLength: 4000}
                }
            };

            return addTypeToStore(store, et);
        }

        var q = breeze.EntityQuery
            .from("drinks")
            .using(manager)
            .execute()
            .then(function(res) {
                console.log('success!');
                console.log(res);
            }, function(res) {
                console.log('fail!');
                console.log(res);
            });
    }

})();
