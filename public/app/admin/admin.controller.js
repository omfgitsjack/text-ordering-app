(function () {
    "use strict";

    angular
        .module('app.admin')
        .controller('adminController', adminController);

    function adminController($scope, $timeout, $mdSidenav, $mdUtil, $log, $state, ShopService, breeze) {

        $scope.toggleLeft = buildToggler('left');

        function buildToggler(navID) {
            var debounceFn = $mdUtil.debounce(function () {
                $mdSidenav(navID)
                    .toggle()
                    .then(function () {
                        $log.debug("toggle " + navID + " is done");
                    });
            }, 300);
            return debounceFn;
        }

        $scope.leftClose = function () {
            $mdSidenav('left').close()
                .then(function () {
                    $log.debug("close LEFT is done");
                });
        };

        $scope.goToOrders = function () {
            $state.go('admin.orders');
        };

        $scope.goToFoodMenu = function () {
            $state.go('admin.food');
        };

        $scope.goToDrinkMenu = function () {
            $state.go('admin.drinks');
        };

        $scope.changeStoreStatus = function () {
            // Dont do anything.
        };

        // Initialize ShopService
        ShopService
            .get()
            .success(function (item) {
                $scope.shop = {
                    is_open: item['is_open']
                };

                $scope.$watch('shop', function (newVal, oldVal) {
                    if (newVal !== oldVal) {
                        ShopService
                            .update(newVal)
                            .success(function (res) {
                                toastr.success("You updated your shop's status");
                            });
                    }
                }, true)
            });

        // Convenience variables
        var DT = breeze.DataType;
        var Identity = breeze.AutoGeneratedKeyType.Identity;
        var Validator = breeze.Validator;
        var noConversion = breeze.NamingConvention.none;

        var serviceName = 'api/'; // root path for data from the server
        var helper = new breeze.config.MetadataHelper();
        var addTypeToStore = helper.addTypeToStore.bind(helper);

        function createMetadataStore(serviceName) {

            var store = new breeze.MetadataStore({
                namingConvention: noConversion
            });

            var jsonResultsAdapter = new breeze.JsonResultsAdapter({
                name: "ucafe",
                extractResults: function (json) {
                    return json.results;
                },
                visitNode: function (node, mappingContext, nodeContext) {

                    var entityType = "";

                    if (node.$type) {
                        entityType = node.$type;
                    } else {
                        // It's a GET call
                        var queryResourceName = mappingContext.query.resourceName;
                        entityType = mappingContext.metadataStore.getEntityTypeNameForResourceName(queryResourceName);
                    }

                    return {
                        entityType: entityType,
                        nodeId: node.id
                    };
                }
            });

            // Setup data service
            var dataService = new breeze.DataService({
                serviceName: serviceName,
                hasServerMetadata: false,
                jsonResultsAdapter: jsonResultsAdapter
            });

            store.addDataService(dataService);

            // Add types in alphabetical order ... because we can
            addDrinkType(store);

            return store;
        }

        var store = createMetadataStore(serviceName);

        var manager = new breeze.EntityManager({
            dataService: store.getDataService(serviceName),
            metadataStore: store
        });

        // inherit from the regular Breeze Web API OData adapter
        var adapter = breeze.config.getAdapterInstance('dataService', 'webApi');

        function addDrinkType(store) {
            var et = {
                // Header info
                name: "drink",
                autoGeneratedKeyType: Identity,
                defaultResourceName: "drinks",

                dataProperties: {
                    id: {dataType: DT.Int32, isPartOfKey: true},
                    name: {maxLength: 4000}, // DT.String is the default type
                    description: {maxLength: 4000},
                    price: {dataType: DT.Double, maxLength: 4000},
                    taxedPrice: {dataType: DT.Double, maxLength: 4000},
                    image: {},
                    calories: {dataType: DT.Int32},
                    protein: {dataType: DT.Int32},
                    fat: {dataType: DT.Int32},
                    carbs: {dataType: DT.Int32},
                    fiber: {dataType: DT.Int32},
                    ingredients: {},
                    created_at: {dataType: DT.DateTime},
                    modified_at: {dataType: DT.DateTime},
                    food_type: {}
                }
            };

            return addTypeToStore(store, et);
        }

        var q = breeze.EntityQuery
            .from("drinks")
            .using(manager)
            .execute()
            .then(function (res) {
                console.log('read worked');
                console.log(res);

                var newDrink = manager.createEntity('drink', {
                    "name": "new drink baby",
                    "description": "Quam reprehenderit aut tempore voluptatibus facilis voluptas fuga distinctio in eligendi et quia voluptatum nam iste facilis et optio non sit sit sit est corporis totam dolores non perferendis est qui unde eos omnis nostrum quidem autem quibusdam rerum re",
                    "price": 7.55,
                    "taxedprice": 8.5,
                    "image": "assets/food/7.JPG",
                    "calories": 172,
                    "protein": 15,
                    "fat": 381,
                    "carbs": 160,
                    "fiber": 115,
                    "ingredients": "Molestiae minus ipsa quia sed sint et voluptatem dicta ipsam est et rerum repellat soluta fuga voluptatem blanditiis dolorem vitae facilis omnis incidunt quod aut adipisci recusandae odio laudantium amet dolore quia numquam ab tenetur harum sint enim poss",
                    "spicy": 1,
                    "food_type": "drink"
                });

                var so = new breeze.SaveOptions({resourceName: 'drinks', dataService: store.getDataService(serviceName)});
                manager.saveChanges(null, so, function (res) {
                        console.log('save worked');
                        console.log(res);
                        var m = res.entities[0].entityAspect.entityManager;
                        var q = breeze.EntityQuery.from('drinks');

                        console.log('local query');

                        var localItems = m.executeQueryLocally(q);
                        console.log(localItems);

                        console.log('editing...');

                        localItems[0].price = 99999;

                        m.saveChanges(null, so, function(res) {
                            console.log('put worked');
                            console.log(res);
                        })
                    },
                    function (res) {
                        console.log('fail');
                        console.log(res);
                    });
            }, function (res) {
                console.log('fail!');
                console.log(res);
            });


    }

})();
